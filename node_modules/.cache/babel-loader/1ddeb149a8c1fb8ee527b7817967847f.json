{"ast":null,"code":"var _jsxFileName = \"/Users/May/Documents/Code/nftflow/dApp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport openseaLogo from './assets/opensea-logo.png';\nimport { ethers } from \"ethers\";\nimport NFTFLOW from \"./abi/NFTFLOW.json\";\nimport React from \"react\"; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = \"NftflowStarkNet\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"https://testnets.opensea.io/collection/nftflow-membership-pass-x1ee7njvot\";\nconst CONTRACT_ADDRESS = \"0x48E09beF65B4Ba709C69f7003C385f2aC09493D1\"; // const CONTRACT_ADDRESS = \"0x249F5fF0D0A4604912e2C27107cb5c22d8eD8dE1\";\n\nconst RINKEBY_CHAIN_ID = \"0x4\";\n\nconst App = () => {\n  _s();\n\n  const [currentUserAccount, setCurrentUserAccount] = React.useState(\"\");\n  const [totalTokensMinted, setTotalTokensMinted] = React.useState(0);\n\n  const confirmNetwork = async (ethereum, chainId) => {\n    let returnedChainId = await ethereum.request({\n      method: \"eth_chainId\"\n    });\n    console.log(\"Connected to chain \" + chainId); // String, hex code of the chainId of the Rinkebey test network\n\n    return returnedChainId !== RINKEBY_CHAIN_ID ? false : true;\n  };\n\n  const checkWalletConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      alert(\"Please login to Metamask ðŸ˜ž!\");\n    }\n\n    let ok = await confirmNetwork(ethereum, RINKEBY_CHAIN_ID);\n\n    if (!ok) {\n      alert(\"You are not connected to the Rinkeby Test Network ðŸ˜ž!\");\n      return;\n    }\n\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts.length !== 0) {\n      // User has already connected wallet.\n      setCurrentUserAccount(accounts[0]);\n      setupNFTMintedListener();\n    } else {\n      console.warn(\"No authorized account found\");\n    }\n  };\n\n  React.useEffect(() => {\n    checkWalletConnected();\n    getMinted();\n  });\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Please login to Metamask ðŸ˜ž!\");\n        return;\n      }\n\n      let ok = await confirmNetwork(ethereum, RINKEBY_CHAIN_ID);\n\n      if (ok) {\n        // Request accounts on wallet connect\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        console.log(\"Connected! Account is: \", accounts[0]);\n        setCurrentUserAccount(accounts[0]);\n        setupNFTMintedListener();\n      } else {\n        alert(\"You are not connected to the Rinkeby Test Network ðŸ˜ž!\");\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const setupNFTMintedListener = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, NFTFLOW.abi, signer); // Listen to event\n\n        connectedContract.on(\"NFTMinted\", (tokenId, owner) => {\n          setTotalTokensMinted(tokenId.toNumber());\n        });\n        console.log(\"event listener set up!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getMinted = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, NFTFLOW.abi, signer);\n        const Minted = await connectedContract.getTokensMinted();\n        setTotalTokensMinted(Minted.toNumber());\n      } else {\n        console.error(\"ethereum object not found\");\n      }\n    } catch (e) {\n      console.error(\"error in getSupply:\", e);\n    }\n  };\n\n  const mintNFT = async () => {\n    try {\n      let ethereum = window.ethereum;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, NFTFLOW.abi, signer);\n        let gasP = await provider.getGasPrice();\n        var rawTx = {\n          value: ethers.utils.parseEther(\"0.1\", 'ether').toHexString(),\n          gasPrice: gasP._hex\n        };\n        let findgaslimit = await provider.estimateGas(signer, CONTRACT_ADDRESS);\n\n        try {\n          // mint NFT\n          // const tx = await connectedContract.mintNFTEth({\n          // value: ethers.utils.parseEther(\"0.1\", 'ether').toHexString(),\n          // gasLimit: 1000000,\n          // gasPrice: gasP._hex,\n          // });\n          const tx = await connectedContract.estimateGas.mintNFTEth({\n            value: ethers.utils.parseEther(\"0.1\", 'ether').toHexString(),\n            gasPrice: gasP._hex\n          }); // withdraw onlyOwner\n          // const tx = await connectedContract.withdraw();\n\n          console.log(\"mint success\", tx);\n        } catch (error) {\n          console.log(error);\n        }\n      } else {\n        console.error(\"ethereum object not found\");\n      }\n    } catch (e) {\n      // alert(\"An account can only mint one Member Pass ðŸ˜ž!\")\n      console.error(\"error in mintNFT :\", e);\n    }\n  };\n\n  const disconnectWallet = async () => {\n    setCurrentUserAccount(\"\");\n  }; // Render Methods\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: () => {\n      connectWallet();\n    },\n    children: \"Connect Your Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n\n  const renderMintNFTButton = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: mintNFT,\n    children: \"MINT\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n\n  const renderLogout = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: disconnectWallet,\n    children: \"Disconnect Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"NFTflow Membership Pass\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"opensea-button\",\n          href: OPENSEA_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: openseaLogo,\n            alt: \"opensea-logo\",\n            className: \"opensea-logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this), \"View Collection on OpenSea\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: currentUserAccount ? renderMintNFTButton() : renderNotConnectedContainer()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: currentUserAccount ? renderLogout() : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text gradient-text\",\n          children: [totalTokensMinted, \" / 1111 minted\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built by @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"mzQEBXiJHWFPhofk1csPpYv8+j0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/May/Documents/Code/nftflow/dApp/src/App.js"],"names":["openseaLogo","ethers","NFTFLOW","React","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","CONTRACT_ADDRESS","RINKEBY_CHAIN_ID","App","currentUserAccount","setCurrentUserAccount","useState","totalTokensMinted","setTotalTokensMinted","confirmNetwork","ethereum","chainId","returnedChainId","request","method","console","log","checkWalletConnected","window","alert","ok","accounts","length","setupNFTMintedListener","warn","useEffect","getMinted","connectWallet","e","error","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","on","tokenId","owner","toNumber","Minted","getTokensMinted","mintNFT","gasP","getGasPrice","rawTx","value","utils","parseEther","toHexString","gasPrice","_hex","findgaslimit","estimateGas","tx","mintNFTEth","disconnectWallet","renderNotConnectedContainer","renderMintNFTButton","renderLogout","twitterLogo"],"mappings":";;;AAAA,OAAO,kBAAP;;AAEA,OAAOA,WAAP,MAAwB,2BAAxB;AAEA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;;AACA,MAAMC,cAAc,GAAG,iBAAvB;AACA,MAAMC,YAAY,GAAI,uBAAsBD,cAAe,EAA3D;AACA,MAAME,YAAY,GAAG,2EAArB;AACA,MAAMC,gBAAgB,GAAG,4CAAzB,C,CACA;;AACA,MAAMC,gBAAgB,GAAG,KAAzB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CR,KAAK,CAACS,QAAN,CAAe,EAAf,CAApD;AACA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CX,KAAK,CAACS,QAAN,CAAe,CAAf,CAAlD;;AAEA,QAAMG,cAAc,GAAG,OAAOC,QAAP,EAAiBC,OAAjB,KAA6B;AAClD,QAAIC,eAAe,GAAG,MAAMF,QAAQ,CAACG,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAA5B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBL,OAApC,EAFkD,CAIlD;;AACA,WAAOC,eAAe,KAAKV,gBAApB,GAAuC,KAAvC,GAA+C,IAAtD;AACD,GAND;;AAQA,QAAMe,oBAAoB,GAAG,YAAY;AACvC,UAAM;AAAEP,MAAAA;AAAF,QAAeQ,MAArB;;AACA,QAAI,CAACR,QAAL,EAAe;AACbS,MAAAA,KAAK,CAAC,8BAAD,CAAL;AACD;;AAED,QAAIC,EAAE,GAAG,MAAMX,cAAc,CAACC,QAAD,EAAWR,gBAAX,CAA7B;;AACA,QAAI,CAACkB,EAAL,EAAS;AACPD,MAAAA,KAAK,CAAC,uDAAD,CAAL;AACA;AACD;;AAED,UAAME,QAAQ,GAAG,MAAMX,QAAQ,CAACG,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAvB;;AAEA,QAAIO,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EAA2B;AACzB;AACAjB,MAAAA,qBAAqB,CAACgB,QAAQ,CAAC,CAAD,CAAT,CAArB;AACAE,MAAAA,sBAAsB;AACvB,KAJD,MAIO;AACLR,MAAAA,OAAO,CAACS,IAAR,CAAa,6BAAb;AACD;AACF,GArBD;;AAuBA3B,EAAAA,KAAK,CAAC4B,SAAN,CAAgB,MAAM;AACpBR,IAAAA,oBAAoB;AACpBS,IAAAA,SAAS;AACV,GAHD;;AAKA,QAAMC,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAM;AAAEjB,QAAAA;AAAF,UAAeQ,MAArB;;AACA,UAAI,CAACR,QAAL,EAAe;AACbS,QAAAA,KAAK,CAAC,8BAAD,CAAL;AACA;AACD;;AAED,UAAIC,EAAE,GAAG,MAAMX,cAAc,CAACC,QAAD,EAAWR,gBAAX,CAA7B;;AACA,UAAIkB,EAAJ,EAAQ;AACN;AACA,cAAMC,QAAQ,GAAG,MAAMX,QAAQ,CAACG,OAAT,CAAiB;AACtCC,UAAAA,MAAM,EAAE;AAD8B,SAAjB,CAAvB;AAGAC,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCK,QAAQ,CAAC,CAAD,CAA/C;AACAhB,QAAAA,qBAAqB,CAACgB,QAAQ,CAAC,CAAD,CAAT,CAArB;AACAE,QAAAA,sBAAsB;AACvB,OARD,MAQO;AACLJ,QAAAA,KAAK,CAAC,uDAAD,CAAL;AACD;AACF,KAnBD,CAmBE,OAAOS,CAAP,EAAU;AACVb,MAAAA,OAAO,CAACc,KAAR,CAAcD,CAAd;AACD;AACF,GAvBD;;AAyBA,QAAML,sBAAsB,GAAG,YAAY;AACzC,QAAI;AACF,YAAM;AAAEb,QAAAA;AAAF,UAAeQ,MAArB;;AACA,UAAIR,QAAJ,EAAc;AACZ;AACA,cAAMoB,QAAQ,GAAG,IAAInC,MAAM,CAACoC,SAAP,CAAiBC,YAArB,CAAkCtB,QAAlC,CAAjB;AACA,cAAMuB,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,iBAAiB,GAAG,IAAIxC,MAAM,CAACyC,QAAX,CACxBnC,gBADwB,EAExBL,OAAO,CAACyC,GAFgB,EAGxBJ,MAHwB,CAA1B,CAJY,CAUZ;;AACAE,QAAAA,iBAAiB,CAACG,EAAlB,CACE,WADF,EAEE,CAACC,OAAD,EAAWC,KAAX,KAAqB;AACnBhC,UAAAA,oBAAoB,CAAC+B,OAAO,CAACE,QAAR,EAAD,CAApB;AACD,SAJH;AAMA1B,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD,OAlBD,MAkBO;AACLD,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD;AACF,KAvBD,CAuBE,OAAOa,KAAP,EAAc;AACdd,MAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACD;AACF,GA3BD;;AA6BA,QAAMH,SAAS,GAAG,YAAY;AAC5B,QAAI;AACF,YAAM;AAAEhB,QAAAA;AAAF,UAAeQ,MAArB;;AACA,UAAIR,QAAJ,EAAc;AACZ,cAAMoB,QAAQ,GAAG,IAAInC,MAAM,CAACoC,SAAP,CAAiBC,YAArB,CAAkCtB,QAAlC,CAAjB;AACA,cAAMuB,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,iBAAiB,GAAG,IAAIxC,MAAM,CAACyC,QAAX,CACxBnC,gBADwB,EAExBL,OAAO,CAACyC,GAFgB,EAGxBJ,MAHwB,CAA1B;AAKA,cAAMS,MAAM,GAAG,MAAMP,iBAAiB,CAACQ,eAAlB,EAArB;AACAnC,QAAAA,oBAAoB,CAACkC,MAAM,CAACD,QAAP,EAAD,CAApB;AACD,OAVD,MAUO;AACL1B,QAAAA,OAAO,CAACc,KAAR,CAAc,2BAAd;AACD;AACF,KAfD,CAeE,OAAOD,CAAP,EAAU;AACVb,MAAAA,OAAO,CAACc,KAAR,CAAc,qBAAd,EAAqCD,CAArC;AACD;AAEF,GApBD;;AAuBA,QAAMgB,OAAO,GAAG,YAAY;AAC1B,QAAI;AACF,UAAIlC,QAAQ,GAAGQ,MAAM,CAACR,QAAtB;;AACA,UAAIA,QAAJ,EAAc;AACZ,cAAMoB,QAAQ,GAAG,IAAInC,MAAM,CAACoC,SAAP,CAAiBC,YAArB,CAAkCtB,QAAlC,CAAjB;AACA,cAAMuB,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,iBAAiB,GAAG,IAAIxC,MAAM,CAACyC,QAAX,CACxBnC,gBADwB,EAExBL,OAAO,CAACyC,GAFgB,EAGxBJ,MAHwB,CAA1B;AAMA,YAAIY,IAAI,GAAG,MAAMf,QAAQ,CAACgB,WAAT,EAAjB;AAEA,YAAIC,KAAK,GAAG;AACVC,UAAAA,KAAK,EAAErD,MAAM,CAACsD,KAAP,CAAaC,UAAb,CAAwB,KAAxB,EAA+B,OAA/B,EAAwCC,WAAxC,EADG;AAEVC,UAAAA,QAAQ,EAAEP,IAAI,CAACQ;AAFL,SAAZ;AAKA,YAAIC,YAAY,GAAG,MAAMxB,QAAQ,CAACyB,WAAT,CAAqBtB,MAArB,EAA6BhC,gBAA7B,CAAzB;;AAEA,YAAI;AACF;AACA;AACE;AACA;AACA;AACF;AACA,gBAAMuD,EAAE,GAAG,MAAMrB,iBAAiB,CAACoB,WAAlB,CAA8BE,UAA9B,CAAyC;AACxDT,YAAAA,KAAK,EAAErD,MAAM,CAACsD,KAAP,CAAaC,UAAb,CAAwB,KAAxB,EAA+B,OAA/B,EAAwCC,WAAxC,EADiD;AAExDC,YAAAA,QAAQ,EAAEP,IAAI,CAACQ;AAFyC,WAAzC,CAAjB,CAPE,CAYF;AACA;;AAEAtC,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BwC,EAA5B;AACD,SAhBD,CAgBE,OAAO3B,KAAP,EAAc;AACdd,UAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACD;AACF,OArCD,MAqCO;AACLd,QAAAA,OAAO,CAACc,KAAR,CAAc,2BAAd;AACD;AACF,KA1CD,CA0CE,OAAOD,CAAP,EAAU;AACV;AACAb,MAAAA,OAAO,CAACc,KAAR,CAAc,oBAAd,EAAoCD,CAApC;AACD;AACF,GA/CD;;AAiDA,QAAM8B,gBAAgB,GAAG,YAAY;AACnCrD,IAAAA,qBAAqB,CAAC,EAAD,CAArB;AACD,GAFD,CAtKgB,CA0KhB;;;AACA,QAAMsD,2BAA2B,GAAG,mBAClC;AACE,IAAA,SAAS,EAAC,kCADZ;AAEE,IAAA,OAAO,EAAE,MAAM;AACbhC,MAAAA,aAAa;AACd,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAWA,QAAMiC,mBAAmB,GAAG,mBAC1B;AAAQ,IAAA,SAAS,EAAC,kCAAlB;AAAqD,IAAA,OAAO,EAAEhB,OAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAMA,QAAMiB,YAAY,GAAG,mBACnB;AACE,IAAA,SAAS,EAAC,kCADZ;AAEE,IAAA,OAAO,EAAEH,gBAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACE;AAAG,UAAA,SAAS,EAAC,sBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACE;AACI,UAAA,SAAS,EAAC,gBADd;AAEI,UAAA,IAAI,EAAE1D,YAFV;AAGI,UAAA,MAAM,EAAC,QAHX;AAII,UAAA,GAAG,EAAC,YAJR;AAAA,kCAMI;AAAK,YAAA,GAAG,EAAEN,WAAV;AAAuB,YAAA,GAAG,EAAC,cAA3B;AAA0C,YAAA,SAAS,EAAC;AAApD;AAAA;AAAA;AAAA;AAAA,kBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF,eAaE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,kBACGU,kBAAkB,GACfwD,mBAAmB,EADJ,GAEfD,2BAA2B;AAHjC;AAAA;AAAA;AAAA;AAAA,cAbF,eAkBE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,kBACGvD,kBAAkB,GAAGyD,YAAY,EAAf,GAAoB;AADzC;AAAA;AAAA;AAAA;AAAA,cAlBF,eAqBE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACE;AAAG,UAAA,SAAS,EAAC,wBAAb;AAAA,qBACGtD,iBADH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cArBF,eA0BE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAK,UAAA,GAAG,EAAC,cAAT;AAAwB,UAAA,SAAS,EAAC,cAAlC;AAAiD,UAAA,GAAG,EAAEuD;AAAtD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,SAAS,EAAC,aADZ;AAEE,UAAA,IAAI,EAAE/D,YAFR;AAGE,UAAA,MAAM,EAAC,QAHT;AAIE,UAAA,GAAG,EAAC,YAJN;AAAA,oBAKG,aAAYD,cAAe;AAL9B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cA1BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAwCD,CA7OD;;GAAMK,G;;KAAAA,G;AA+ON,eAAeA,GAAf","sourcesContent":["import \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport openseaLogo from './assets/opensea-logo.png'\n\nimport { ethers } from \"ethers\";\nimport NFTFLOW from \"./abi/NFTFLOW.json\";\nimport React from \"react\";\n\n// Constants\nconst TWITTER_HANDLE = \"NftflowStarkNet\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"https://testnets.opensea.io/collection/nftflow-membership-pass-x1ee7njvot\";\nconst CONTRACT_ADDRESS = \"0x48E09beF65B4Ba709C69f7003C385f2aC09493D1\";\n// const CONTRACT_ADDRESS = \"0x249F5fF0D0A4604912e2C27107cb5c22d8eD8dE1\";\nconst RINKEBY_CHAIN_ID = \"0x4\";\n\nconst App = () => {\n  const [currentUserAccount, setCurrentUserAccount] = React.useState(\"\");\n  const [totalTokensMinted, setTotalTokensMinted] = React.useState(0);\n\n  const confirmNetwork = async (ethereum, chainId) => {\n    let returnedChainId = await ethereum.request({ method: \"eth_chainId\" });\n    console.log(\"Connected to chain \" + chainId);\n\n    // String, hex code of the chainId of the Rinkebey test network\n    return returnedChainId !== RINKEBY_CHAIN_ID ? false : true;\n  };\n\n  const checkWalletConnected = async () => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      alert(\"Please login to Metamask ðŸ˜ž!\");\n    }\n\n    let ok = await confirmNetwork(ethereum, RINKEBY_CHAIN_ID);\n    if (!ok) {\n      alert(\"You are not connected to the Rinkeby Test Network ðŸ˜ž!\");\n      return;\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      // User has already connected wallet.\n      setCurrentUserAccount(accounts[0]);\n      setupNFTMintedListener();\n    } else {\n      console.warn(\"No authorized account found\");\n    }\n  };\n\n  React.useEffect(() => {\n    checkWalletConnected();\n    getMinted();\n  });\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Please login to Metamask ðŸ˜ž!\");\n        return;\n      }\n\n      let ok = await confirmNetwork(ethereum, RINKEBY_CHAIN_ID);\n      if (ok) {\n        // Request accounts on wallet connect\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        console.log(\"Connected! Account is: \", accounts[0]);\n        setCurrentUserAccount(accounts[0]);\n        setupNFTMintedListener();\n      } else {\n        alert(\"You are not connected to the Rinkeby Test Network ðŸ˜ž!\");\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const setupNFTMintedListener = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          NFTFLOW.abi,\n          signer\n        );\n\n        // Listen to event\n        connectedContract.on(\n          \"NFTMinted\",\n          (tokenId , owner) => {\n            setTotalTokensMinted(tokenId.toNumber());\n          }\n        );\n        console.log(\"event listener set up!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getMinted = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          NFTFLOW.abi,\n          signer\n        );\n        const Minted = await connectedContract.getTokensMinted();\n        setTotalTokensMinted(Minted.toNumber());\n      } else {\n        console.error(\"ethereum object not found\");\n      }\n    } catch (e) {\n      console.error(\"error in getSupply:\", e);\n    }\n\n  };\n  \n\n  const mintNFT = async () => {\n    try {\n      let ethereum = window.ethereum;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          NFTFLOW.abi,\n          signer\n        );\n\n        let gasP = await provider.getGasPrice();\n\n        var rawTx = {\n          value: ethers.utils.parseEther(\"0.1\", 'ether').toHexString(),\n          gasPrice: gasP._hex,\n        };\n\n        let findgaslimit = await provider.estimateGas(signer, CONTRACT_ADDRESS, )\n\n        try {\n          // mint NFT\n          // const tx = await connectedContract.mintNFTEth({\n            // value: ethers.utils.parseEther(\"0.1\", 'ether').toHexString(),\n            // gasLimit: 1000000,\n            // gasPrice: gasP._hex,\n          // });\n          const tx = await connectedContract.estimateGas.mintNFTEth({\n            value: ethers.utils.parseEther(\"0.1\", 'ether').toHexString(),\n            gasPrice: gasP._hex,\n          })\n\n          // withdraw onlyOwner\n          // const tx = await connectedContract.withdraw();\n\n          console.log(\"mint success\", tx);\n        } catch (error) {\n          console.log(error);\n        }\n      } else {\n        console.error(\"ethereum object not found\");\n      }\n    } catch (e) {\n      // alert(\"An account can only mint one Member Pass ðŸ˜ž!\")\n      console.error(\"error in mintNFT :\", e);\n    }\n  };\n\n  const disconnectWallet = async () => {\n    setCurrentUserAccount(\"\");\n  };\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={() => {\n        connectWallet();\n      }}\n    >\n      Connect Your Wallet\n    </button>\n  );\n\n  const renderMintNFTButton = () => (\n    <button className=\"cta-button connect-wallet-button\" onClick={mintNFT}>\n      MINT\n    </button>\n  );\n\n  const renderLogout = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={disconnectWallet}\n    >\n      Disconnect Wallet\n    </button>\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">NFTflow Membership Pass</p>\n        </div>\n        <div className=\"header-container\">\n          <a\n              className=\"opensea-button\"\n              href={OPENSEA_LINK}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <img src={openseaLogo} alt=\"opensea-logo\" className=\"opensea-logo\" />View Collection on OpenSea</a>\n        </div>\n        <div className=\"header-container\">\n          {currentUserAccount\n            ? renderMintNFTButton()\n            : renderNotConnectedContainer()}\n        </div>\n        <div className=\"header-container\">\n          {currentUserAccount ? renderLogout() : null}\n        </div>\n        <div className=\"header-container\">\n          <p className=\"sub-text gradient-text\">\n            {totalTokensMinted} / 1111 minted\n          </p>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}